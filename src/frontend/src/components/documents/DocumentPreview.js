// src/frontend/src/components/documents/DocumentPreview.js
import React from 'react';
import { FiFile, FiUser, FiCalendar, FiTag, FiShield, FiClock } from 'react-icons/fi';

function DocumentPreview({ data }) {
  // If no data is provided, don't render anything
  if (!data) return null;

  // --- Helper Functions ---

  /**
   * Formats a date string into a localized date string (Vietnamese locale).
   * @param {string} date - The date string to format.
   * @returns {string} The formatted date string.
   */
  const formatDate = (date) => {
    return new Date(date).toLocaleDateString('vi-VN');
  };

  /**
   * Returns the human-readable label for a given security level.
   * @param {string} level - The security level code (e.g., 'public', 'internal').
   * @returns {string} The corresponding label.
   */
  const getSecurityLevelLabel = (level) => {
    const levels = {
      'public': 'C√¥ng khai (P)',
      'internal': 'N·ªôi b·ªô (I)',
      'confidential': 'B·∫£o m·∫≠t (C)',
      'restricted': 'H·∫°n ch·∫ø (R)'
    };
    return levels[level] || level;
  };

  /**
   * Returns the human-readable label for a given priority level.
   * @param {string} priority - The priority level code (e.g., 'low', 'normal').
   * @returns {string} The corresponding label.
   */
  const getPriorityLabel = (priority) => {
    const priorities = {
      'low': 'Th·∫•p',
      'normal': 'B√¨nh th∆∞·ªùng',
      'high': 'Cao',
      'urgent': 'Kh·∫©n c·∫•p'
    };
    return priorities[priority] || priority;
  };

  /**
   * Returns the Tailwind CSS classes for background and text color based on priority level.
   * @param {string} priority - The priority level code.
   * @returns {string} Tailwind CSS classes.
   */
  const getPriorityColor = (priority) => {
    const colors = {
      'low': 'bg-gray-100 text-gray-800',
      'normal': 'bg-blue-100 text-blue-800',
      'high': 'bg-yellow-100 text-yellow-800',
      'urgent': 'bg-red-100 text-red-800'
    };
    return colors[priority] || 'bg-gray-100 text-gray-800';
  };

  /**
   * Returns the Tailwind CSS classes for background and text color based on security level.
   * @param {string} level - The security level code.
   * @returns {string} Tailwind CSS classes.
   */
  const getSecurityColor = (level) => {
    const colors = {
      'public': 'bg-green-100 text-green-800',
      'internal': 'bg-blue-100 text-blue-800',
      'confidential': 'bg-yellow-100 text-yellow-800',
      'restricted': 'bg-red-100 text-red-800'
    };
    return colors[level] || 'bg-gray-100 text-gray-800';
  };

  // --- JSX Rendering ---
  return (
    <div className="space-y-6">
      {/* Information Banner */}
      <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
        <h3 className="text-lg font-semibold text-blue-900 mb-2">Xem tr∆∞·ªõc T√†i li·ªáu</h3>
        <p className="text-blue-700 text-sm">
          Vui l√≤ng ki·ªÉm tra k·ªπ th√¥ng tin tr∆∞·ªõc khi t·∫°o t√†i li·ªáu. Sau khi t·∫°o, m·ªôt s·ªë th√¥ng tin c√≥ th·ªÉ kh√¥ng th·ªÉ thay ƒë·ªïi.
        </p>
      </div>

      {/* Basic Information Section */}
      <div className="bg-white border border-gray-200 rounded-lg p-6">
        <h4 className="text-md font-semibold text-gray-900 mb-4 flex items-center">
          <FiFile className="mr-2" />
          Th√¥ng tin c∆° b·∫£n
        </h4>

        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label className="block text-sm font-medium text-gray-600">M√£ t√†i li·ªáu</label>
            <p className="text-gray-900 font-mono bg-gray-50 px-3 py-2 rounded border">
              {data.document_code || 'Ch∆∞a c√≥ m√£'}
            </p>
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-600">Lo·∫°i t√†i li·ªáu</label>
            <p className="text-gray-900 px-3 py-2">{data.type || 'Ch∆∞a ch·ªçn'}</p>
          </div>

          <div className="md:col-span-2">
            <label className="block text-sm font-medium text-gray-600">Ti√™u ƒë·ªÅ</label>
            <p className="text-gray-900 px-3 py-2 font-medium">{data.title || 'Ch∆∞a c√≥ ti√™u ƒë·ªÅ'}</p>
          </div>

          <div className="md:col-span-2">
            <label className="block text-sm font-medium text-gray-600">M√¥ t·∫£</label>
            <p className="text-gray-900 px-3 py-2">
              {data.description || 'Kh√¥ng c√≥ m√¥ t·∫£'}
            </p>
          </div>

          <div className="md:col-span-2">
            <label className="block text-sm font-medium text-gray-600">Ph·∫°m vi √°p d·ª•ng</label>
            <p className="text-gray-900 px-3 py-2">
              {data.scope_of_application || 'Ch∆∞a x√°c ƒë·ªãnh'}
            </p>
          </div>
        </div>
      </div>

      {/* Metadata Section */}
      <div className="bg-white border border-gray-200 rounded-lg p-6">
        <h4 className="text-md font-semibold text-gray-900 mb-4 flex items-center">
          <FiTag className="mr-2" />
          Metadata
        </h4>

        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label className="block text-sm font-medium text-gray-600">Ph√≤ng ban</label>
            <p className="text-gray-900 px-3 py-2">{data.department || 'Ch∆∞a ch·ªçn'}</p>
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-600">ƒê·ªô ∆∞u ti√™n</label>
            <span className={`inline-flex px-3 py-1 rounded-full text-sm font-medium ${getPriorityColor(data.priority)}`}>
              {getPriorityLabel(data.priority)}
            </span>
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-600">M·ª©c b·∫£o m·∫≠t</label>
            <span className={`inline-flex px-3 py-1 rounded-full text-sm font-medium ${getSecurityColor(data.security_level)}`}>
              {getSecurityLevelLabel(data.security_level)}
            </span>
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-600">Chu k·ª≥ r√† so√°t</label>
            <p className="text-gray-900 px-3 py-2 flex items-center">
              <FiClock className="mr-1" size={16} />
              {data.review_cycle ? `${data.review_cycle} th√°ng` : 'Ch∆∞a x√°c ƒë·ªãnh'}
            </p>
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-600">Th·ªùi gian l∆∞u tr·ªØ</label>
            <p className="text-gray-900 px-3 py-2 flex items-center">
              <FiCalendar className="mr-1" size={16} />
              {data.retention_period ? `${data.retention_period} th√°ng` : 'Ch∆∞a x√°c ƒë·ªãnh'}
            </p>
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-600">T·ª´ kh√≥a</label>
            <p className="text-gray-900 px-3 py-2">
              {data.keywords || 'Kh√¥ng c√≥ t·ª´ kh√≥a'}
            </p>
          </div>
        </div>

        {/* Recipients */}
        {data.recipients && data.recipients.length > 0 && (
          <div className="mt-4">
            <label className="block text-sm font-medium text-gray-600 mb-2">Ng∆∞·ªùi nh·∫≠n</label>
            <div className="flex flex-wrap gap-2">
              {data.recipients.map((recipient, index) => (
                <span
                  key={index}
                  className="inline-flex items-center px-3 py-1 rounded-full text-sm bg-blue-100 text-blue-800"
                >
                  <FiUser className="mr-1" size={14} />
                  {recipient}
                </span>
              ))}
            </div>
          </div>
        )}
      </div>

      {/* File Information Section */}
      {data.file_info && (
        <div className="bg-white border border-gray-200 rounded-lg p-6">
          <h4 className="text-md font-semibold text-gray-900 mb-4 flex items-center">
            <FiFile className="mr-2" />
            File ƒë√≠nh k√®m
          </h4>

          <div className="flex items-center space-x-3 p-3 bg-gray-50 rounded border">
            <div className="text-2xl">
              {/* Conditional rendering for file icons based on mimetype */}
              {data.file_info.mimetype?.includes('pdf') ? 'üìÑ' :
               data.file_info.mimetype?.includes('word') ? 'üìù' :
               data.file_info.mimetype?.includes('sheet') ? 'üìä' : ' '}
            </div>
            <div>
              <p className="font-medium text-gray-900">{data.file_info.originalname}</p>
              <p className="text-sm text-gray-500">
                {/* Format file size in MB */}
                {data.file_info.size ? `${(data.file_info.size / 1024 / 1024).toFixed(2)} MB` : 'K√≠ch th∆∞·ªõc kh√¥ng x√°c ƒë·ªãnh'} -
                {data.file_info.mimetype || 'ƒê·ªãnh d·∫°ng kh√¥ng x√°c ƒë·ªãnh'}
              </p>
            </div>
          </div>
        </div>
      )}

      {/* Summary Section */}
      <div className="bg-green-50 border border-green-200 rounded-lg p-4">
        <h4 className="text-md font-semibold text-green-900 mb-2">T√≥m t·∫Øt</h4>
        <ul className="text-green-700 text-sm space-y-1">
          <li>- T√†i li·ªáu s·∫Ω ƒë∆∞·ª£c t·∫°o v·ªõi tr·∫°ng th√°i "Nh√°p" ho·∫∑c "ƒêang xem x√©t"</li>
          <li>- Phi√™n b·∫£n ban ƒë·∫ßu: 01.00</li>
          <li>- B·∫°n c√≥ th·ªÉ ch·ªânh s·ª≠a t√†i li·ªáu sau khi t·∫°o (n·∫øu c√≥ quy·ªÅn)</li>
          {data.file_info && <li>- File ƒë√≠nh k√®m s·∫Ω ƒë∆∞·ª£c li√™n k·∫øt v·ªõi t√†i li·ªáu</li>}
          <li>- T√†i li·ªáu s·∫Ω ƒë∆∞·ª£c th√¥ng b√°o ƒë·∫øn ng∆∞·ªùi nh·∫≠n (n·∫øu c√≥)</li>
        </ul>
      </div>
    </div>
  );
}

export default DocumentPreview;