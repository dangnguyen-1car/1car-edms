/**
 * EDMS 1CAR - Database Seeding Script
 * N·∫°p d·ªØ li·ªáu m·∫´u cho ng∆∞·ªùi d√πng v√† t√†i li·ªáu.
 */

const fs = require('fs').promises; // S·ª≠ d·ª•ng fs.promises ƒë·ªÉ l√†m vi·ªác v·ªõi async/await
const path = require('path');
const { dbManager } = require('../src/backend/config/database'); // ƒê·∫£m b·∫£o ƒë∆∞·ªùng d·∫´n n√†y ƒë√∫ng
const { appLogger } = require('../src/backend/utils/logger'); // ƒê·ªÉ ghi log

const SEEDS_DIR = path.join(__dirname, '../database/seeds');

/**
 * Th·ª±c thi m·ªôt file SQL.
 * @param {string} filePath ƒê∆∞·ªùng d·∫´n ƒë·∫øn file SQL.
 */
async function executeSqlFile(filePath) {
  try {
    const sql = await fs.readFile(filePath, 'utf-8');
    // SQLite c√≥ th·ªÉ th·ª±c thi nhi·ªÅu c√¢u l·ªánh trong m·ªôt chu·ªói,
    // nh∆∞ng ƒë·ªÉ an to√†n v√† d·ªÖ debug h∆°n, ta c√≥ th·ªÉ t√°ch ch√∫ng ra.
    // Tuy nhi√™n, v·ªõi sqlite3, db.exec() c√≥ th·ªÉ ch·∫°y nhi·ªÅu c√¢u l·ªánh.
    // Ho·∫∑c, n·∫øu dbManager.run ch·ªâ ch·∫°y m·ªôt l·ªánh, ta c·∫ßn t√°ch l·ªánh.
    // Gi·∫£ ƒë·ªãnh dbManager.run c√≥ th·ªÉ x·ª≠ l√Ω nhi·ªÅu l·ªánh ho·∫∑c db.exec ƒë∆∞·ª£c d√πng b√™n trong.
    // N·∫øu dbManager.run ch·ªâ ch·∫°y 1 l·ªánh, b·∫°n c·∫ßn parse file SQL th√†nh t·ª´ng l·ªánh ri√™ng.
    // C√°ch ƒë∆°n gi·∫£n nh·∫•t l√† dbManager c√≥ m·ªôt ph∆∞∆°ng th·ª©c execScript ho·∫∑c t∆∞∆°ng t·ª±.
    // Hi·ªán t·∫°i, dbManager kh√¥ng c√≥, n√™n ta d√πng c√°ch chia theo d·∫•u ; v√† ch·∫°y t·ª´ng l·ªánh.

    const statements = sql.split(';\n').map(stmt => stmt.trim()).filter(stmt => stmt.length > 0);

    for (const stmt of statements) {
      if (stmt.toUpperCase().startsWith('SELECT')) {
        // B·ªè qua c√°c l·ªánh SELECT trong file seed (n·∫øu c√≥, v√≠ d·ª• ƒë·ªÉ verify)
        appLogger.info(`Skipping SELECT statement in seed: ${stmt.substring(0, 50)}...`);
        continue;
      }
      if (stmt.toUpperCase().startsWith('--')) {
        // B·ªè qua comment
        appLogger.info(`Skipping comment in seed: ${stmt.substring(0, 50)}...`);
        continue;
      }
      await dbManager.run(stmt); // Gi·∫£ s·ª≠ dbManager.run c√≥ th·ªÉ th·ª±c thi t·ª´ng l·ªánh
    }
    appLogger.info(`Successfully executed seed file: ${path.basename(filePath)}`);
  } catch (error) {
    appLogger.error(`Error executing SQL file ${filePath}: ${error.message}`);
    throw error; // N√©m l·ªói ƒë·ªÉ d·ª´ng qu√° tr√¨nh seed n·∫øu c√≥ l·ªói
  }
}

/**
 * H√†m ch√≠nh ƒë·ªÉ ch·∫°y seed.
 */
async function seedDatabase() {
  appLogger.info('üå± Starting database seeding process...');

  try {
    // Kh·ªüi t·∫°o k·∫øt n·ªëi database (quan tr·ªçng!)
    await dbManager.initialize();
    appLogger.info('Database initialized for seeding.');

    // L·∫•y danh s√°ch c√°c file seed theo th·ª© t·ª± mong mu·ªën
    // V√≠ d·ª•: users tr∆∞·ªõc, sau ƒë√≥ ƒë·∫øn documents
    const seedFiles = [
      'users.sql',
      'documents.sql'
      // Th√™m c√°c file seed kh√°c n·∫øu c√≥
    ];

    for (const fileName of seedFiles) {
      const filePath = path.join(SEEDS_DIR, fileName);
      try {
        await fs.access(filePath); // Ki·ªÉm tra file t·ªìn t·∫°i
        appLogger.info(`Seeding data from ${fileName}...`);
        await executeSqlFile(filePath);
      } catch (error) {
        // N·∫øu l·ªói l√† ENOENT (file kh√¥ng t·ªìn t·∫°i), b·ªè qua file ƒë√≥ v√† log c·∫£nh b√°o
        if (error.code === 'ENOENT') {
          appLogger.warn(`Seed file not found: ${fileName}. Skipping.`);
        } else {
          // N·∫øu l√† l·ªói kh√°c, n√©m l·∫°i ƒë·ªÉ d·ª´ng
          throw error;
        }
      }
    }

    appLogger.info('‚úÖ Database seeding completed successfully!');

  } catch (error) {
    appLogger.error('‚ùå Database seeding failed:', error);
    process.exitCode = 1; // B√°o l·ªói khi tho√°t
  } finally {
    // ƒê√≥ng k·∫øt n·ªëi database
    if (dbManager.db) {
      try {
        await dbManager.close();
        appLogger.info('Database connection closed after seeding.');
      } catch (closeError) {
        appLogger.error('Error closing database connection after seeding:', closeError);
      }
    }
  }
}

// Ch·∫°y h√†m seed
seedDatabase();